package Homework;

public class Questions_Chapter_8 {
    //1. Используя код, созданный в упражнении 8.1, поместите в пакет qpack интерфейс
    //ICharQ и все три реализующих его класса. Оставив класс IQDemo в пакете, ис­
    //пользуемом по умолчанию, покажите, как импортировать и использовать классы
    //из пакета qpack.

    /**
     * классы можно импортировать 3 вариантами:
     * import путь_класса.класс         //import Chapter_8.Access_modifier.bookpack.Book;
     * import пакет_где_лежит_Класс+*   // import Chapter_8.Access_modifier.bookpack.*;
     * также можно extends пакет_где лежит класс.класс //extends Chapter_8.Access_modifier.bookpack.Book
     */

    //2. Что такое пространство имен? Почему так важна возможность его разделения на
    //отдельные области в Java?

    /**
     * Пространство имен, это область где лежат, определенный классы, и тут есть своё пространство
     * имена не могут повторяться. Но если выйти из области, и создать новый пакет, то можно будет создать
     * точно такие же именна класов.Конфликт имен, также есть модификатор доступа, который работает, в пределах
     * области пакета, protected
     */

    //3.Содержимое пакетов хранится в ______ _
    /**
     * в обычных папках, пакеты, это и есть папки
     */

    //4. В чем отличие доступа, определяемого ключевым словом protected, от доступа по умолчанию?

    /**
     * protected доступ из класса тогоже пакета, из подкласса того же пакета, из подкласса в любом пакете,  и все
     * по-умолчанию доступ из класса тогоже пакета, из подкласса того же пакета, и все
     */

    //5. Допустим, классы, содержащиеся в одном пакете, требуется использовать в другом
    // пакете. Какими двумя способами можно добиться этого?

    /**
     * protected(подкласс) and public
     */

    //6. "Один интерфейс - множество методов" - таков главный принцип Java. Какое
    // языковое средство лучше всего демонстрирует этот принцип?

    /**
     * не понимаю суть вопроса, какой язые, больше всех это реализует, но вроде как C++
     *
     */

    //7. Сколько классов могут реализовать один и тот же интерфейс? Сколько интерфей­
    //сов может реализовать класс?

    /**
     * -n
     */

    //8. Может ли один интерфейс наследовать другой?
    /**
     * Yes
     */

    //9. Создайте интерфейс для класса Vehicle, рассмотренного в главе 7, назвав его
    //IVehicle.

    /**
     * Готово
     */

    //10.Переменные, объявленные в интерфейсе, неявно принимают модификаторы
    // static и final. Какие преимущества это дает?

    /**
     * Использование констант, для типизированных методов, или классов, они подойдут
     * Например, константа 60 sec, или 24 hours
     */

    //11. Пакет по сути является контейнером для классов. Верно или не верно?

    /**
     * если крыша открываеться и закрываеться то да
     */

    //12. Какой стандартный пакет автоматически импортируется в любую программу на
    //Java?

    /**
     * java Object
     */

    //13. Какое ключевое слово используется для объявления в интерфейсе метода по
    //    умолчанию?

    /**
     * default
     */

    //14.Возможно ли, начиная с JDK 8, определение статического метода интерфейса?

    /**
     * Да!
     */

    //15. Предположим, что интерфейс ICharQ, представленный в упражнении 8.1, полу­
    //чил широкое распространение в течение нескольких лет. В какой-то момент вы
    //решили добавить в него метод reset () , который будет использоваться для сброса
    //очереди в ее исходное пустое состояние. Как это можно осуществить, не нару­
    //шая работоспособности сушествующего кода, в случае использования комплекта
    //JDK8?

    /**
     * сделаю метод по умолчанию default
     */

    //16. Как можно вызвать статический метод интерфейса?

    /**
     * interface_name.method();
     *
     */

    }

